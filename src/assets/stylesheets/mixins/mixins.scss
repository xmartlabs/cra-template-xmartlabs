@use "sass:map";
@use "sass:math";
@use "../variables" as *;

/*
  Builds a query for use with a @media tag so we can define a style only between
  certain screen sizes. If either $max or $min is null, that value is ignored.
  EXAMPLE OUTPUT:
  "(max-width: 1500px) and (min-width: 750px)"
*/
@function buildsafemaxminmediaquery($max, $min) {
  $query: null;

  @if $max {
    $query: "(max-width: #{$max})";
  }

  @if $min {
    @if $query {
      $query: "#{$query} and (min-width: #{$min})";
    } @else {
      $query: "(min-width: #{$min})";
    }
  }

  @return $query;
}

/*
  Gets the ith element from a map. The order is defined by how the elements where inserted into the map.
  If an ith position would end up outside the keys list, return null instead.
  EXAMPLE OUTPUT:
  1500px
*/
@function getsafemapvaluefrompos($map, $i) {
  $list: map.keys($map);

  @if $i < 1 or $i > length($list) {
    @return null;
  }

  @return map-get($map, nth($list, $i));
}

/*
  Substracts from $value only if it is not null. If null, return same value.
  EXAMPLE OUTPUT:
  1500px - 1
*/

@function safeSubtraction($value, $subtract) {
  @if $value {
    @return $value - $subtract;
  }

  @return $value;
}

@mixin maxWidth($breakpoint) {
  @media only screen and (max-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

@mixin minWidth($breakpoint) {
  @media only screen and (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}
